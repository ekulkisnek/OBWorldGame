<!DOCTYPE html>
<html>
<head>
    <title>Pokémon-Style Game</title>
    <style>
        /* ----------------------------------------------------------
           GAME CONTAINER & PLAYER
        ---------------------------------------------------------- */
        #game-container {
            width: 320px;
            height: 240px;
            background-image: url("{{ url_for('static', filename='assets/grass.svg') }}");
            background-size: 16px 16px;
            position: relative;
            overflow: hidden;
            border: 2px solid black;
            image-rendering: pixelated;
            background-color: #8bc34a; /* Fallback color */
        }

        /* Player's sprite sheet: 4 frames across × 4 rows (64×64 total) */
        #player {
            width: 16px;
            height: 16px;
            position: absolute;
            background-image: url("{{ url_for('static', filename='assets/pokeguy.png') }}");
            background-size: 64px 64px; 
            background-repeat: no-repeat;
            z-index: 10;
        }

        /* ----------------------------------------------------------
           OBJECT TILES (HOUSE, TREES, ETC.)
           The new sheet is ~192px wide × 160px tall.
           We'll define .tile as the base, then each object with
           its own width, height, and background-position.
        ---------------------------------------------------------- */
        .tile {
            position: absolute;
            image-rendering: pixelated;
            background-image: url("{{ url_for('static', filename='assets/tiles.png') }}");
            background-size: 192px 160px; 
            background-repeat: no-repeat;
        }

        /* 1) Big House (top-left corner, ~80×64) */
        .house {
            width: 80px;
            height: 64px;
            background-position: 0 0; /* top-left corner of tiles.png */
        }

        /* 2) Large Round Tree (top-right, ~48×64 at x=144, y=0) */
        .tree-large {
            width: 48px;
            height: 64px;
            background-position: -144px 0;
        }

        /* 3) Medium Tree (~32×48). Example at x=112, y=16 */
        .tree-medium {
            width: 32px;
            height: 48px;
            background-position: -112px -16px;
        }

        /* 4) Small Tree (~32×48). Example at x=112, y=64 */
        .tree-small {
            width: 32px;
            height: 48px;
            background-position: -112px -64px;
        }

        /* 5) Large Brown Stump or Cliff (~48×48 at x=0, y=64) */
        .stump {
            width: 48px;
            height: 48px;
            background-position: 0 -64px;
        }

        /* 6) Large Green Bush/Grass (~32×32 at x=64, y=64) */
        .bush-large {
            width: 32px;
            height: 32px;
            background-position: -64px -64px;
        }

        /* 7) 16×16 objects around the lower half (fences, barrels, etc.): */

        /* a) Flower (x=96, y=64) */
        .flower {
            width: 16px;
            height: 16px;
            background-position: -96px -64px;
        }

        /* b) Fence Post (x=112, y=64) */
        .fence-post {
            width: 16px;
            height: 16px;
            background-position: -112px -64px;
        }

        /* c) Sign (x=128, y=64) */
        .sign {
            width: 16px;
            height: 16px;
            background-position: -128px -64px;
        }

        /* d) Barrel (x=96, y=80) */
        .barrel {
            width: 16px;
            height: 16px;
            background-position: -96px -80px;
        }

        /* e) Well (x=112, y=80) */
        .well {
            width: 16px;
            height: 16px;
            background-position: -112px -80px;
        }

        /* f) Candle/Torch (16×32). Example at x=144, y=80 */
        .candle {
            width: 16px;
            height: 32px;
            background-position: -144px -80px;
        }

        /* 8) Rock (if you want a small 16×16 rock, x=160, y=80, etc.) */
        .rock {
            width: 16px;
            height: 16px;
            background-position: -160px -80px;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="player"></div>
    </div>

    <script>
        /* ----------------------------------------------------------
           CONFIG CONSTANTS
        ---------------------------------------------------------- */
        const TILE_SIZE = 16;        // Each map tile is 16×16
        const MAP_WIDTH = 20;        // 20 tiles wide
        const MAP_HEIGHT = 15;       // 15 tiles tall
        const ANIMATION_FRAMES = 4;  // 4 walking frames per direction
        const ANIMATION_SPEED = 150; // ms between animation frames

        /* ----------------------------------------------------------
           GAME CLASS
        ---------------------------------------------------------- */
        class Game {
            constructor() {
                this.container = document.getElementById("game-container");
                this.player = document.getElementById("player");

                // Player starts at tile (9,7) => pixel coords
                this.playerX = 9 * TILE_SIZE;
                this.playerY = 7 * TILE_SIZE;

                this.moveSpeed = 1.5; // movement speed in pixels/frame
                this.keys = { up: false, down: false, left: false, right: false };
                this.facing = "down";
                this.currentFrame = 0;
                this.animationTimer = null;
                this.isMoving = false;

                this.map = [];
                this.initMap();
                this.updatePlayerPosition();
                this.setupControls();

                requestAnimationFrame(() => this.gameLoop());
            }

            /* ------------------------------------------------------
               Initialize map array & place objects
            ------------------------------------------------------ */
            initMap() {
                // Fill map with zeros
                for (let y = 0; y < MAP_HEIGHT; y++) {
                    this.map[y] = [];
                    for (let x = 0; x < MAP_WIDTH; x++) {
                        this.map[y][x] = 0;
                    }
                }

                // EXAMPLE USAGE: Place a big house at (1,1)
                // House is 80×64 => 5 tiles wide × 4 tiles tall
                this.placeObject(1, 1, 5, 4, 1, "house");

                // Large round tree (48×64 => 3 tiles wide × 4 tiles tall)
                this.placeObject(10, 1, 3, 4, 2, "tree-large");

                // Medium tree (32×48 => 2×3 tiles)
                this.placeObject(14, 1, 2, 3, 3, "tree-medium");

                // Small tree (another 32×48 => 2×3 tiles)
                this.placeObject(2, 9, 2, 3, 3, "tree-small");

                // Large stump (48×48 => 3×3 tiles)
                this.placeObject(7, 5, 3, 3, 4, "stump");

                // Large bush (32×32 => 2×2 tiles)
                this.placeObject(5, 12, 2, 2, 5, "bush-large");

                // A flower (16×16 => 1×1 tile)
                this.placeObject(3, 2, 1, 1, 6, "flower");

                // Fence post (16×16 => 1×1 tile)
                this.placeObject(12, 8, 1, 1, 7, "fence-post");

                // Sign (16×16 => 1×1 tile)
                this.placeObject(9, 5, 1, 1, 8, "sign");

                // Barrel (16×16 => 1×1 tile)
                this.placeObject(15, 12, 1, 1, 9, "barrel");

                // Well (16×16 => 1×1 tile)
                this.placeObject(8, 10, 1, 1, 10, "well");

                // Candle (16×32 => 1×2 tiles)
                this.placeObject(17, 2, 1, 2, 11, "candle");

                // Another small rock
                this.placeObject(18, 13, 1, 1, 12, "rock");
            }

            /* ------------------------------------------------------
               Can we place an object of size w×h at tile (x,y)?
            ------------------------------------------------------ */
            canPlace(x, y, w, h) {
                for (let dy = 0; dy < h; dy++) {
                    for (let dx = 0; dx < w; dx++) {
                        const checkX = x + dx;
                        const checkY = y + dy;
                        if (
                            checkX < 0 || checkX >= MAP_WIDTH ||
                            checkY < 0 || checkY >= MAP_HEIGHT ||
                            this.map[checkY][checkX] !== 0
                        ) {
                            return false;
                        }
                    }
                }
                return true;
            }

            /* ------------------------------------------------------
               Place object & mark the map array
            ------------------------------------------------------ */
            placeObject(x, y, w, h, type, className) {
                // Mark these tiles as occupied
                for (let dy = 0; dy < h; dy++) {
                    for (let dx = 0; dx < w; dx++) {
                        this.map[y + dy][x + dx] = type;
                    }
                }
                // Create the DOM element
                const obj = document.createElement("div");
                obj.className = `tile ${className}`;
                obj.style.left = (x * TILE_SIZE) + "px";
                obj.style.top = (y * TILE_SIZE) + "px";
                this.container.appendChild(obj);
            }

            /* ------------------------------------------------------
               Collision check for smooth pixel-based movement
            ------------------------------------------------------ */
            canMovePixel(px, py) {
                const playerSize = 16;
                const corners = [
                    { x: px, y: py },
                    { x: px + playerSize - 1, y: py },
                    { x: px, y: py + playerSize - 1 },
                    { x: px + playerSize - 1, y: py + playerSize - 1 }
                ];
                for (let c of corners) {
                    const tileX = Math.floor(c.x / TILE_SIZE);
                    const tileY = Math.floor(c.y / TILE_SIZE);
                    if (
                        tileX < 0 || tileX >= MAP_WIDTH ||
                        tileY < 0 || tileY >= MAP_HEIGHT ||
                        this.map[tileY][tileX] !== 0
                    ) {
                        return false;
                    }
                }
                return true;
            }

            /* ------------------------------------------------------
               Setup arrow key listeners
            ------------------------------------------------------ */
            setupControls() {
                document.addEventListener("keydown", (event) => {
                    switch (event.key) {
                        case "ArrowUp":
                            event.preventDefault();
                            this.keys.up = true;
                            break;
                        case "ArrowDown":
                            event.preventDefault();
                            this.keys.down = true;
                            break;
                        case "ArrowLeft":
                            event.preventDefault();
                            this.keys.left = true;
                            break;
                        case "ArrowRight":
                            event.preventDefault();
                            this.keys.right = true;
                            break;
                    }
                });

                document.addEventListener("keyup", (event) => {
                    switch (event.key) {
                        case "ArrowUp":
                            this.keys.up = false;
                            break;
                        case "ArrowDown":
                            this.keys.down = false;
                            break;
                        case "ArrowLeft":
                            this.keys.left = false;
                            break;
                        case "ArrowRight":
                            this.keys.right = false;
                            break;
                    }
                });
            }

            /* ------------------------------------------------------
               Main loop for smooth movement
            ------------------------------------------------------ */
            gameLoop() {
                let dx = 0, dy = 0;
                this.isMoving = false;

                if (this.keys.up) {
                    dy -= this.moveSpeed;
                    this.facing = "up";
                    this.isMoving = true;
                }
                if (this.keys.down) {
                    dy += this.moveSpeed;
                    this.facing = "down";
                    this.isMoving = true;
                }
                if (this.keys.left) {
                    dx -= this.moveSpeed;
                    this.facing = "left";
                    this.isMoving = true;
                }
                if (this.keys.right) {
                    dx += this.moveSpeed;
                    this.facing = "right";
                    this.isMoving = true;
                }

                // Check X collision
                const newX = this.playerX + dx;
                if (this.canMovePixel(newX, this.playerY)) {
                    this.playerX = newX;
                }

                // Check Y collision
                const newY = this.playerY + dy;
                if (this.canMovePixel(this.playerX, newY)) {
                    this.playerY = newY;
                }

                // Update DOM position
                this.updatePlayerPosition();

                // If moving & no animation is active, start anim
                if (this.isMoving && !this.animationTimer) {
                    this.updateAnimation();
                }

                requestAnimationFrame(() => this.gameLoop());
            }

            /* ------------------------------------------------------
               Position only
            ------------------------------------------------------ */
            updatePlayerDOMPosition() {
                this.player.style.left = this.playerX + "px";
                this.player.style.top = this.playerY + "px";
            }

            updatePlayerPosition() {
                this.updatePlayerDOMPosition();
            }

            /* ------------------------------------------------------
               Walking animation frames
            ------------------------------------------------------ */
            updateAnimation() {
                const row = { down: 0, left: 1, right: 2, up: 3 }[this.facing];
                const frameX = this.isMoving ? (this.currentFrame % ANIMATION_FRAMES) * 16 : 0;
                const frameY = row * 16;
                this.player.style.backgroundPosition = `-${frameX}px -${frameY}px`;

                if (this.animationTimer) {
                    clearTimeout(this.animationTimer);
                    this.animationTimer = null;
                }
                if (this.isMoving) {
                    this.currentFrame = (this.currentFrame + 1) % ANIMATION_FRAMES;
                    this.animationTimer = setTimeout(() => {
                        this.updateAnimation();
                    }, ANIMATION_SPEED);
                } else if (this.currentFrame !== 0) {
                    this.currentFrame = 0;
                    this.updateAnimation();
                }
            }
        }

        window.addEventListener('load', () => {
            new Game();
        });
    </script>
</body>
</html>
